!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CustomDataset	dataset.py	/^class CustomDataset(data.Dataset):$/;"	c
DUTSDataset	dataset.py	/^class DUTSDataset(data.Dataset):$/;"	c
DecoderCell	network.py	/^class DecoderCell(nn.Module):$/;"	c
DecoderCell	network4att_test.py	/^class DecoderCell(nn.Module):$/;"	c
Encoder	network.py	/^class Encoder(nn.Module):$/;"	c
Encoder	network4att_test.py	/^class Encoder(nn.Module):$/;"	c
PairDataset	dataset.py	/^class PairDataset(data.Dataset):$/;"	c
PicanetG	network.py	/^class PicanetG(nn.Module):$/;"	c
PicanetG	network4att_test.py	/^class PicanetG(nn.Module):$/;"	c
PicanetL	network.py	/^class PicanetL(nn.Module):$/;"	c
PicanetL	network4att_test.py	/^class PicanetL(nn.Module):$/;"	c
RandomCrop	dataset.py	/^class RandomCrop(object):$/;"	c
RandomFlip	dataset.py	/^class RandomFlip(object):$/;"	c
Renet	network.py	/^class Renet(nn.Module):$/;"	c
Renet	network4att_test.py	/^class Renet(nn.Module):$/;"	c
Resize	dataset.py	/^class Resize(object):$/;"	c
ToTensor	dataset.py	/^class ToTensor(object):$/;"	c
Unet	network.py	/^class Unet(nn.Module):$/;"	c
Unet	network4att_test.py	/^class Unet(nn.Module):$/;"	c
__call__	dataset.py	/^    def __call__(self, sample):$/;"	m	class:RandomCrop	file:
__call__	dataset.py	/^    def __call__(self, sample):$/;"	m	class:RandomFlip	file:
__call__	dataset.py	/^    def __call__(self, sample):$/;"	m	class:Resize	file:
__call__	dataset.py	/^    def __call__(self, sample):$/;"	m	class:ToTensor	file:
__getitem__	dataset.py	/^    def __getitem__(self, item):$/;"	m	class:CustomDataset	file:
__getitem__	dataset.py	/^    def __getitem__(self, item):$/;"	m	class:DUTSDataset	file:
__getitem__	dataset.py	/^    def __getitem__(self, item):$/;"	m	class:PairDataset	file:
__init__	dataset.py	/^    def __init__(self):$/;"	m	class:ToTensor
__init__	dataset.py	/^    def __init__(self, prob):$/;"	m	class:RandomFlip
__init__	dataset.py	/^    def __init__(self, root_dir):$/;"	m	class:CustomDataset
__init__	dataset.py	/^    def __init__(self, root_dir, train=True, data_augmentation=True):$/;"	m	class:DUTSDataset
__init__	dataset.py	/^    def __init__(self, root_dir, train=True, data_augmentation=True):$/;"	m	class:PairDataset
__init__	dataset.py	/^    def __init__(self, size):$/;"	m	class:RandomCrop
__init__	dataset.py	/^    def __init__(self, size):$/;"	m	class:Resize
__init__	network.py	/^    def __init__(self):$/;"	m	class:Encoder
__init__	network.py	/^    def __init__(self, cfg={'PicaNet': "GGLLL",$/;"	m	class:Unet
__init__	network.py	/^    def __init__(self, in_channel):$/;"	m	class:PicanetL
__init__	network.py	/^    def __init__(self, size, in_channel):$/;"	m	class:PicanetG
__init__	network.py	/^    def __init__(self, size, in_channel, out_channel):$/;"	m	class:Renet
__init__	network.py	/^    def __init__(self, size, in_channel, out_channel, mode):$/;"	m	class:DecoderCell
__init__	network4att_test.py	/^    def __init__(self):$/;"	m	class:Encoder
__init__	network4att_test.py	/^    def __init__(self, cfg={'PicaNet': "GGLLL",$/;"	m	class:Unet
__init__	network4att_test.py	/^    def __init__(self, in_channel):$/;"	m	class:PicanetL
__init__	network4att_test.py	/^    def __init__(self, size, in_channel):$/;"	m	class:PicanetG
__init__	network4att_test.py	/^    def __init__(self, size, in_channel, out_channel):$/;"	m	class:Renet
__init__	network4att_test.py	/^    def __init__(self, size, in_channel, out_channel, mode):$/;"	m	class:DecoderCell
__len__	dataset.py	/^    def __len__(self):$/;"	m	class:CustomDataset	file:
__len__	dataset.py	/^    def __len__(self):$/;"	m	class:DUTSDataset	file:
__len__	dataset.py	/^    def __len__(self):$/;"	m	class:PairDataset	file:
args	image_test.py	/^    args = parser.parse_args()$/;"	v
args	measure_test.py	/^    args = parser.parse_args()$/;"	v
args	train.py	/^    args = parser.parse_args()$/;"	v
arrange	dataset.py	/^    def arrange(self):$/;"	m	class:DUTSDataset
batch_size	network.py	/^    batch_size = 1$/;"	v	class:Renet
batch_size	network4att_test.py	/^    batch_size = 1$/;"	v	class:Renet
batch_size	train.py	/^    batch_size = args.batch_size$/;"	v
beta_square	measure_test.py	/^    beta_square = 0.3$/;"	v
cfg	network.py	/^cfg = {'PicaNet': "GGLLL",$/;"	v
cfg	network4att_test.py	/^cfg = {'PicaNet': "GGLLL",$/;"	v
cfg	train.py	/^cfg = {'PicaNet': "GGLLL",$/;"	v
custom_dataset	image_test.py	/^    custom_dataset = CustomDataset(root_dir=args.dataset)$/;"	v
dataloader	image_test.py	/^    dataloader = DataLoader(custom_dataset, args.batch_size, shuffle=False)$/;"	v
dataloader	measure_test.py	/^    dataloader = DataLoader(pairdataset, 8, shuffle=True)$/;"	v
dataloader	train.py	/^    dataloader = DataLoader(duts_dataset, batch_size, shuffle=True, num_workers=0)$/;"	v
decay_step	train.py	/^    decay_step = args.decay_step  # from 50000 step$/;"	v
default	train.py	/^                        default='.\/datasets\/DUTS-TR_train')$/;"	v
default	train.py	/^                        default=None)$/;"	v
device	image_test.py	/^    device = torch.device(args.cuda)$/;"	v
device	measure_test.py	/^    device = torch.device("cuda")$/;"	v
device	network.py	/^    device = torch.device("cuda")$/;"	v	class:Renet
device	network4att_test.py	/^    device = torch.device("cuda")$/;"	v	class:Renet
device	train.py	/^    device = torch.device(args.cuda)$/;"	v
ds	dataset.py	/^    ds = DUTSDataset('..\/DUTS-TR')$/;"	v	class:CustomDataset
duts_dataset	train.py	/^    duts_dataset = PairDataset(args.dataset)$/;"	v
epoch	train.py	/^    epoch = args.epoch$/;"	v
f_score	measure_test.py	/^        f_score = (1 + beta_square) * prec * recall \/ (beta_square * prec + recall)$/;"	v
forward	network.py	/^    def forward(self, *input):$/;"	m	class:DecoderCell
forward	network.py	/^    def forward(self, *input):$/;"	m	class:Encoder
forward	network.py	/^    def forward(self, *input):$/;"	m	class:PicanetG
forward	network.py	/^    def forward(self, *input):$/;"	m	class:PicanetL
forward	network.py	/^    def forward(self, *input):$/;"	m	class:Renet
forward	network.py	/^    def forward(self, *input):$/;"	m	class:Unet
forward	network4att_test.py	/^    def forward(self, *input):$/;"	m	class:DecoderCell
forward	network4att_test.py	/^    def forward(self, *input):$/;"	m	class:Encoder
forward	network4att_test.py	/^    def forward(self, *input):$/;"	m	class:PicanetG
forward	network4att_test.py	/^    def forward(self, *input):$/;"	m	class:PicanetL
forward	network4att_test.py	/^    def forward(self, *input):$/;"	m	class:Renet
forward	network4att_test.py	/^    def forward(self, *input):$/;"	m	class:Unet
global_step	measure_test.py	/^                              global_step=model_iter)$/;"	v
help	image_test.py	/^                        help="Directory of pre-trained model, you can download at \\n"$/;"	v
help	measure_test.py	/^                        help="Directory of folder which contains pre-trained models, you can download at \\n"$/;"	v
help	train.py	/^                        help="Directory of pre-trained model, you can download at \\n"$/;"	v
img	image_test.py	/^        img = batch.to(device)$/;"	v
img	measure_test.py	/^            img = batch['image'].to(device)$/;"	v
img	train.py	/^            img = batch['image'].to(device)$/;"	v
iterate	train.py	/^    iterate = start_iter$/;"	v
learning_rate	train.py	/^    learning_rate = args.learning_rate$/;"	v
learning_rate	train.py	/^    learning_rate = learning_rate * (lr_decay ** (start_iter \/\/ decay_step))$/;"	v
load	train.py	/^    load = args.load$/;"	v
lr_decay	train.py	/^    lr_decay = args.lr_decay$/;"	v
mae	measure_test.py	/^        mae = 0$/;"	v
make_layers	network.py	/^def make_layers(cfg, in_channels):$/;"	f
make_layers	network4att_test.py	/^def make_layers(cfg, in_channels):$/;"	f
mask	measure_test.py	/^            mask = batch['mask'].to(device)$/;"	v
mask	measure_test.py	/^            mask = mask.squeeze(dim=1).cpu()$/;"	v
mask	measure_test.py	/^        mask = torch.cat(masks, 0).round().float()$/;"	v
mask	train.py	/^            mask = batch['mask'].to(device)$/;"	v
masks	measure_test.py	/^        masks = []$/;"	v
model	image_test.py	/^    model = Unet().to(device)$/;"	v
model	measure_test.py	/^    model = Unet().to(device)$/;"	v
model	network.py	/^    model = Unet(cfg).cuda()$/;"	v	class:Renet
model	network4att_test.py	/^    model = Unet(cfg).cuda()$/;"	v	class:Renet
model	train.py	/^    model = Unet(cfg).cuda()$/;"	v
model_iter	measure_test.py	/^        model_iter = int(model_name.split('epo_')[1].split('step')[0])$/;"	v
models	measure_test.py	/^    models = sorted(os.listdir(args.model_dir), key=lambda x: int(x.split('epo_')[1].split('step')[0]))$/;"	v
noise	network.py	/^    noise = torch.randn((batch_size, 3, 224, 224)).type(torch.cuda.FloatTensor)$/;"	v	class:Renet
noise	network4att_test.py	/^    noise = torch.randn((batch_size, 3, 224, 224)).type(torch.cuda.FloatTensor)$/;"	v	class:Renet
now	train.py	/^        now = datetime.datetime.strptime(load.split('\/')[2], '%m%d%H%M')$/;"	v
now	train.py	/^    now = datetime.datetime.now()$/;"	v
opt	network.py	/^    opt = torch.optim.Adam(model.parameters(), lr=0.001)$/;"	v	class:Renet
opt	network4att_test.py	/^    opt = torch.optim.Adam(model.parameters(), lr=0.001)$/;"	v	class:Renet
opt_dec	train.py	/^                opt_dec = torch.optim.SGD(model.decoder.parameters(), lr=learning_rate * 10, momentum=0.9,$/;"	v
opt_dec	train.py	/^    opt_dec = torch.optim.SGD(model.decoder.parameters(), lr=learning_rate * 10, momentum=0.9, weight_decay=0.0005)$/;"	v
opt_en	train.py	/^                opt_en = torch.optim.SGD(model.encoder.parameters(), lr=learning_rate, momentum=0.9,$/;"	v
opt_en	train.py	/^    opt_en = torch.optim.SGD(model.encoder.parameters(), lr=learning_rate, momentum=0.9, weight_decay=0.0005)$/;"	v
pairdataset	measure_test.py	/^    pairdataset = PairDataset(root_dir=args.dataset, train=False, data_augmentation=False)$/;"	v
parser	image_test.py	/^    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)$/;"	v
parser	measure_test.py	/^    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)$/;"	v
parser	train.py	/^    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)$/;"	v
prec	measure_test.py	/^        prec = torch.cat(precs, dim=0).mean(dim=0)$/;"	v
precs	measure_test.py	/^        precs = []$/;"	v
pred	image_test.py	/^        pred = pred[5].data$/;"	v
pred	measure_test.py	/^            pred = pred.requires_grad_(False)$/;"	v
pred	measure_test.py	/^            pred = pred.squeeze(dim=1).cpu()$/;"	v
pred	measure_test.py	/^            pred = pred[5].data$/;"	v
pred	measure_test.py	/^        pred = torch.cat(preds, 0)$/;"	v
preds	measure_test.py	/^        preds = []$/;"	v
r	test_images/read_images.py	/^        r = requests.get(url[:-1]) $/;"	v
recall	measure_test.py	/^        recall = torch.cat(recalls, dim=0).mean(dim=0)$/;"	v
recalls	measure_test.py	/^        recalls = []$/;"	v
start_epo	train.py	/^        start_epo = int(load.split('\/')[3].split('epo')[0])$/;"	v
start_epo	train.py	/^    start_epo = 0$/;"	v
start_iter	train.py	/^        start_iter = 0$/;"	v
start_iter	train.py	/^        start_iter = int(load.split('epo_')[1].strip('step.ckpt')) + 1$/;"	v
start_iter	train.py	/^    start_iter = 0$/;"	v
state_dict	image_test.py	/^    state_dict = torch.load(args.model_dir, map_location=args.cuda)$/;"	v
state_dict	measure_test.py	/^        state_dict = torch.load(os.path.join(args.model_dir, model_name))$/;"	v
state_dict	train.py	/^        state_dict = torch.load(load, map_location=args.cuda)$/;"	v
target	network.py	/^    target = torch.randn((batch_size, 1, 224, 224)).type(torch.cuda.FloatTensor)$/;"	v	class:Renet
target	network4att_test.py	/^    target = torch.randn((batch_size, 1, 224, 224)).type(torch.cuda.FloatTensor)$/;"	v	class:Renet
thlist	measure_test.py	/^            thlist = torch.linspace(0, 1 - 1e-10, 256)$/;"	v
thlist	measure_test.py	/^        thlist = torch.linspace(0, 1 - 1e-10, 256)$/;"	v
tp	measure_test.py	/^                tp = (y_temp * mask).sum(dim=-1).sum(dim=-1)$/;"	v
vgg	network.py	/^    vgg = torchvision.models.vgg16(pretrained=True)$/;"	v	class:Renet
vgg	network4att_test.py	/^    vgg = torchvision.models.vgg16(pretrained=True)$/;"	v	class:Renet
vgg	train.py	/^    vgg = torchvision.models.vgg16(pretrained=True)$/;"	v
weight_decay	train.py	/^                                          weight_decay=0.0005)$/;"	v
weight_decay	train.py	/^                                         weight_decay=0.0005)$/;"	v
weight_save_dir	train.py	/^    weight_save_dir = os.path.join('models', 'state_dict', now.strftime('%m%d%H%M'))$/;"	v
writer	image_test.py	/^        writer = SummaryWriter(args.logdir)$/;"	v
writer	measure_test.py	/^        writer = SummaryWriter(args.logdir)$/;"	v
writer	train.py	/^    writer = SummaryWriter(os.path.join('log', now.strftime('%m%d%H%M')))$/;"	v
y_temp	measure_test.py	/^                y_temp = (pred >= thlist[j]).float()$/;"	v
